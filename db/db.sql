CREATE TABLE IF NOT EXISTS CATEGORIES
(
    ID            INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CATEGORY_NAME VARCHAR(255),
    CONSTRAINT CATEGORIES_PKEY PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS CUSTOMERS
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    ADDRESS            VARCHAR(255),
    CUSTOMER_NAME      VARCHAR(255),
    GENDER             BOOLEAN,
    IS_ACTIVE          BOOLEAN,
    PHONE              VARCHAR(255),
    TOTAL_SPENT        BIGINT,
    TOTAL_ORDERS       INTEGER,
    FTS                TSVECTOR,
    CONSTRAINT CUSTOMERS_PKEY PRIMARY KEY (ID),
    CONSTRAINT UKM3IOM37EFAXD5EUCMXJQQCBE9 UNIQUE (PHONE)
);

CREATE INDEX IF NOT EXISTS CUSTOMERS_FTS_IDX ON CUSTOMERS USING GIN (FTS);

CREATE TABLE IF NOT EXISTS PRODUCT_ATTRIBUTES
(
    ID             INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ATTRIBUTE_NAME VARCHAR(255),
    CONSTRAINT PRODUCT_ATTRIBUTES_PKEY PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS PRODUCTS
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    DESCRIPTION        VARCHAR(255),
    PRODUCT_NAME       VARCHAR(255),
    STATUS             VARCHAR(255),
    FTS                TSVECTOR,
    CONSTRAINT PRODUCTS_PKEY PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS PRODUCT_CATEGORIES
(
    CATEGORY_ID INTEGER,
    PRODUCT_ID  INTEGER,
    CONSTRAINT FKD112RX0ALYCDDSMS029IIFRIH FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES,
    CONSTRAINT FKLDA9RAD6S180HA3DL1NCSP8N7 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS
);

CREATE INDEX IF NOT EXISTS IDX_PRODUCT_NAME_TRGM ON PRODUCTS USING GIN (PRODUCT_NAME GIN_TRGM_OPS);

CREATE INDEX IF NOT EXISTS IDX_PRODUCT_DESC_TRGM ON PRODUCTS USING GIN (DESCRIPTION GIN_TRGM_OPS);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_FTS ON PRODUCTS USING GIN (FTS);

CREATE TABLE IF NOT EXISTS UNITS
(
    ID        INTEGER GENERATED BY DEFAULT AS IDENTITY,
    UNIT_NAME VARCHAR(255) NOT NULL,
    CONSTRAINT UNITS_PKEY PRIMARY KEY (ID),
    CONSTRAINT UK525CSMEMMGTOICJCFHCPF3PK0 UNIQUE (UNIT_NAME)
);

CREATE TABLE IF NOT EXISTS PRODUCT_VARIANTS
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    BARCODE            VARCHAR(255),
    COST_PRICE         BIGINT,
    EXPIRY_DATE        TIMESTAMP(6),
    PRICE              BIGINT,
    PRODUCT_ID         INTEGER,
    QUANTITY           INTEGER,
    SKU                VARCHAR(255),
    UNIT_ID            INTEGER,
    STATUS             VARCHAR(255),
    FTS                TSVECTOR,
    CONSTRAINT PRODUCT_VARIANTS_PKEY PRIMARY KEY (ID),
    CONSTRAINT PRODUCT_VARIANTS_UNIT_ID_FKEY FOREIGN KEY (UNIT_ID) REFERENCES UNITS,
    CONSTRAINT PRODUCT_VARIANTS_PRODUCT_ID_FKEY FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS
);

CREATE TABLE IF NOT EXISTS PRODUCT_ATTRIBUTE_VALUES
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    ATTR_ID            INTEGER,
    ATTR_VALUE         VARCHAR(255),
    PRODUCT_VARIANT_ID INTEGER,
    UNIT_ID            INTEGER,
    CONSTRAINT PRODUCT_ATTRIBUTE_VALUES_PKEY PRIMARY KEY (ID),
    CONSTRAINT PRODUCT_ATTRIBUTE_VALUES_PRODUCT_VARIANT_ID_FKEY FOREIGN KEY (PRODUCT_VARIANT_ID) REFERENCES PRODUCT_VARIANTS,
    CONSTRAINT PRODUCT_ATTRIBUTE_VALUES_ATTR_ID_FKEY FOREIGN KEY (ATTR_ID) REFERENCES PRODUCT_ATTRIBUTES,
    CONSTRAINT PRODUCT_ATTRIBUTE_VALUES_UNIT_ID_FKEY FOREIGN KEY (UNIT_ID) REFERENCES UNITS
);

CREATE TABLE IF NOT EXISTS PRODUCT_IMAGES
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    PATH               VARCHAR(255),
    PRODUCT_VARIANT_ID INTEGER,
    CONSTRAINT PRODUCT_IMAGES_PKEY PRIMARY KEY (ID),
    CONSTRAINT PRODUCT_IMAGES_PRODUCT_VARIANT_ID_FKEY FOREIGN KEY (PRODUCT_VARIANT_ID) REFERENCES PRODUCT_VARIANTS
);

CREATE INDEX IF NOT EXISTS IDX_VARIANT_SKU_TRGM ON PRODUCT_VARIANTS USING GIN (SKU GIN_TRGM_OPS);

CREATE INDEX IF NOT EXISTS IDX_VARIANT_BARCODE_TRGM ON PRODUCT_VARIANTS USING GIN (BARCODE GIN_TRGM_OPS);

CREATE INDEX IF NOT EXISTS IDX_PRODUCT_VARIANTS_FTS ON PRODUCT_VARIANTS USING GIN (FTS);

CREATE TABLE IF NOT EXISTS USERS
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    EMAIL              VARCHAR(255),
    FULLNAME           VARCHAR(255),
    GENDER             BOOLEAN,
    IS_ACTIVE          BOOLEAN,
    PASSWORD           VARCHAR(255),
    PHONE              VARCHAR(255),
    ROLE               VARCHAR(255),
    USERNAME           VARCHAR(255),
    FTS                TSVECTOR,
    CONSTRAINT USERS_PKEY PRIMARY KEY (ID),
    CONSTRAINT UK6DOTKOTT2KJSP8VW4D0M25FB7 UNIQUE (EMAIL),
    CONSTRAINT UKDU5V5SR43G5BFNJI4VB8HG5S3 UNIQUE (PHONE)
);

CREATE TABLE IF NOT EXISTS NOTIFICATIONS
(
    ID          INTEGER GENERATED BY DEFAULT AS IDENTITY,
    BODY        VARCHAR(255),
    IS_READ     BOOLEAN,
    TITLE       VARCHAR(255),
    USER_ID     INTEGER,
    DATE        TIMESTAMP(6),
    ENTITY_ID   INTEGER,
    ENTITY_TYPE VARCHAR(255),
    TYPE        VARCHAR(255),
    CONSTRAINT NOTIFICATIONS_PKEY PRIMARY KEY (ID),
    CONSTRAINT NOTIFICATIONS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES USERS
);

CREATE TABLE IF NOT EXISTS ORDERS
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    CUSTOMER_ID        INTEGER,
    NOTE               VARCHAR(255),
    ORDER_DATE         TIMESTAMP(6),
    ORDER_STATUS       VARCHAR(255),
    RECEIVER_ADDRESS   VARCHAR(255),
    RECEIVER_NAME      VARCHAR(255),
    RECEIVER_PHONE     VARCHAR(255),
    TOTAL_AMOUNT       BIGINT,
    USER_ID            INTEGER,
    FTS                TSVECTOR,
    CONSTRAINT ORDERS_PKEY PRIMARY KEY (ID),
    CONSTRAINT ORDERS_USER_ID_FKEY FOREIGN KEY (USER_ID) REFERENCES USERS,
    CONSTRAINT ORDERS_CUSTOMER_ID_FKEY FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS
);

CREATE TABLE IF NOT EXISTS ORDER_DETAILS
(
    ORDER_ID           INTEGER NOT NULL,
    PRODUCT_VARIANT_ID INTEGER,
    SOLD_PRICE         BIGINT,
    SOLD_QUANTITY      INTEGER,
    PRICE              BIGINT,
    CONSTRAINT FKJYU2QBQT8GNVNO9OE9J2S2LDK FOREIGN KEY (ORDER_ID) REFERENCES ORDERS,
    CONSTRAINT FKSX0ENYL805EMARBR0BGOLN1OQ FOREIGN KEY (PRODUCT_VARIANT_ID) REFERENCES PRODUCT_VARIANTS
);

CREATE TABLE IF NOT EXISTS ORDER_HISTORIES
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    NEW_STATUS         VARCHAR(255),
    OLD_STATUS         VARCHAR(255),
    ORDER_ID           INTEGER,
    CONSTRAINT ORDER_HISTORIES_PKEY PRIMARY KEY (ID),
    CONSTRAINT ORDER_HISTORIES_ORDER_ID_FKEY FOREIGN KEY (ORDER_ID) REFERENCES ORDERS
);

CREATE INDEX IF NOT EXISTS ORDERS_FTS_IDX ON ORDERS USING GIN (FTS);

CREATE TABLE IF NOT EXISTS PAYMENTS
(
    ID                 INTEGER GENERATED BY DEFAULT AS IDENTITY,
    CREATED_BY         INTEGER,
    CREATED_DATE       TIMESTAMP(6),
    LAST_MODIFIED_BY   INTEGER,
    LAST_MODIFIED_DATE TIMESTAMP(6),
    DATE               TIMESTAMP(6),
    ORDER_ID           INTEGER,
    PAID               BIGINT,
    PAYMENT_METHOD     VARCHAR(255),
    REMAINING          BIGINT,
    STATUS             VARCHAR(255),
    CONSTRAINT PAYMENTS_PKEY PRIMARY KEY (ID),
    CONSTRAINT PAYMENTS_ORDER_ID_FKEY FOREIGN KEY (ORDER_ID) REFERENCES ORDERS
);

CREATE INDEX IF NOT EXISTS USERS_FTS_IDX ON USERS USING GIN (FTS);

--
--
--
--
--
--
--
ALTER TABLE CUSTOMERS
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE PRODUCTS
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE PRODUCT_VARIANTS
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE PRODUCT_ATTRIBUTE_VALUES
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE USERS
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE ORDERS
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE ORDER_HISTORIES
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;

ALTER TABLE PAYMENTS
    ALTER COLUMN CREATED_BY
        DROP NOT NULL;


-- Khóa ngoại FK
-- PRODUCT_CATEGORIES
DO
$$
    BEGIN
        ALTER TABLE PRODUCT_CATEGORIES
            ADD CONSTRAINT FK_PRODUCT_CATEGORIES_CATEGORY FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

DO
$$
    BEGIN
        ALTER TABLE PRODUCT_CATEGORIES
            ADD CONSTRAINT FK_PRODUCT_CATEGORIES_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- PRODUCT_VARIANTS
DO
$$
    BEGIN
        ALTER TABLE PRODUCT_VARIANTS
            ADD CONSTRAINT FK_PRODUCT_VARIANTS_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

DO
$$
    BEGIN
        ALTER TABLE PRODUCT_VARIANTS
            ADD CONSTRAINT FK_PRODUCT_VARIANTS_UNIT FOREIGN KEY (UNIT_ID) REFERENCES UNITS (ID) ON DELETE SET NULL;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- PRODUCT_ATTRIBUTE_VALUES
DO
$$
    BEGIN
        ALTER TABLE PRODUCT_ATTRIBUTE_VALUES
            ADD CONSTRAINT FK_ATTR_VALUES_VARIANT FOREIGN KEY (PRODUCT_VARIANT_ID) REFERENCES PRODUCT_VARIANTS (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

DO
$$
    BEGIN
        ALTER TABLE PRODUCT_ATTRIBUTE_VALUES
            ADD CONSTRAINT FK_ATTR_VALUES_ATTR FOREIGN KEY (ATTR_ID) REFERENCES PRODUCT_ATTRIBUTES (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

DO
$$
    BEGIN
        ALTER TABLE PRODUCT_ATTRIBUTE_VALUES
            ADD CONSTRAINT FK_ATTR_VALUES_UNIT FOREIGN KEY (UNIT_ID) REFERENCES UNITS (ID) ON DELETE SET NULL;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- PRODUCT_IMAGES
DO
$$
    BEGIN
        ALTER TABLE PRODUCT_IMAGES
            ADD CONSTRAINT FK_PRODUCT_IMAGES_VARIANT FOREIGN KEY (PRODUCT_VARIANT_ID) REFERENCES PRODUCT_VARIANTS (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- NOTIFICATIONS
DO
$$
    BEGIN
        ALTER TABLE NOTIFICATIONS
            ADD CONSTRAINT FK_NOTIFICATIONS_USER FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE SET NULL;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- ORDERS
DO
$$
    BEGIN
        ALTER TABLE ORDERS
            ADD CONSTRAINT FK_ORDERS_USER FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE SET NULL;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

DO
$$
    BEGIN
        ALTER TABLE ORDERS
            ADD CONSTRAINT FK_ORDERS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (ID) ON DELETE SET NULL;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- ORDER_DETAILS
DO
$$
    BEGIN
        ALTER TABLE ORDER_DETAILS
            ADD CONSTRAINT FK_ORDER_DETAILS_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

DO
$$
    BEGIN
        ALTER TABLE ORDER_DETAILS
            ADD CONSTRAINT FK_ORDER_DETAILS_VARIANT FOREIGN KEY (PRODUCT_VARIANT_ID) REFERENCES PRODUCT_VARIANTS (ID) ON DELETE RESTRICT;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- ORDER_HISTORIES
DO
$$
    BEGIN
        ALTER TABLE ORDER_HISTORIES
            ADD CONSTRAINT FK_ORDER_HISTORIES_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ID) ON DELETE CASCADE;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;

-- PAYMENTS
DO
$$
    BEGIN
        ALTER TABLE PAYMENTS
            ADD CONSTRAINT FK_PAYMENTS_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ID) ON DELETE RESTRICT;
    EXCEPTION
        WHEN duplicate_object THEN
    END
$$;


--
--
--
--
--
--
--
CREATE EXTENSION IF NOT EXISTS PG_TRGM;
CREATE EXTENSION IF NOT EXISTS UNACCENT;

-- Bảng products
ALTER TABLE PRODUCTS
    ADD COLUMN IF NOT EXISTS FTS TSVECTOR;

-- Bảng product_variants
ALTER TABLE PRODUCT_VARIANTS
    ADD COLUMN IF NOT EXISTS FTS TSVECTOR;

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_FTS ON PUBLIC.PRODUCTS USING GIN (FTS);

CREATE INDEX IF NOT EXISTS IDX_PRODUCT_VARIANTS_FTS ON PUBLIC.PRODUCT_VARIANTS USING GIN (FTS);

CREATE OR REPLACE FUNCTION PUBLIC.PRODUCTS_FTS_TRIGGER() RETURNS TRIGGER AS
$$
BEGIN
    NEW.fts
        :=
            to_tsvector('simple',
                        lower(unaccent(coalesce(NEW.product_name, '') || ' ' || coalesce(NEW.description, ''))));
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION PUBLIC.PRODUCT_VARIANTS_FTS_TRIGGER() RETURNS TRIGGER AS
$$
BEGIN
    NEW.fts
        :=
            to_tsvector('simple', lower(unaccent(coalesce(NEW.sku, '') || ' ' || coalesce(NEW.barcode, ''))));
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

-- Trigger cho bảng products
CREATE
    OR REPLACE TRIGGER TRG_PRODUCTS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON PUBLIC.PRODUCTS
    FOR EACH ROW
EXECUTE FUNCTION PUBLIC.PRODUCTS_FTS_TRIGGER();

-- Trigger cho bảng product_variants
CREATE
    OR REPLACE TRIGGER TRG_PRODUCT_VARIANTS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON PUBLIC.PRODUCT_VARIANTS
    FOR EACH ROW
EXECUTE FUNCTION PUBLIC.PRODUCT_VARIANTS_FTS_TRIGGER();

-- Bảng products
UPDATE PRODUCTS
SET FTS = TO_TSVECTOR(
        'simple',
        LOWER(
                UNACCENT(
                        COALESCE(PRODUCT_NAME, '') || ' ' || COALESCE(DESCRIPTION, '')
                )
        )
          );

-- Bảng product_variants
UPDATE PRODUCT_VARIANTS
SET FTS = TO_TSVECTOR(
        'simple',
        LOWER(
                UNACCENT(COALESCE(SKU, '') || ' ' || COALESCE(BARCODE, ''))
        )
          );

----------------
-------------
-- customers
-- Thêm cột FTS nếu chưa có
ALTER TABLE CUSTOMERS
    ADD COLUMN IF NOT EXISTS FTS TSVECTOR;

-- Tạo chỉ mục FTS
CREATE INDEX IF NOT EXISTS CUSTOMERS_FTS_IDX ON CUSTOMERS USING GIN (FTS);

-- Cập nhật dữ liệu ban đầu
UPDATE CUSTOMERS
SET FTS = TO_TSVECTOR(
        'simple',
        LOWER(
                UNACCENT(
                        COALESCE(CUSTOMER_NAME, '') || ' ' || COALESCE(ADDRESS, '') || ' ' || COALESCE(PHONE, '')
                )
        )
          );

CREATE OR REPLACE FUNCTION UPDATE_CUSTOMERS_FTS() RETURNS TRIGGER AS
$$
BEGIN
    NEW.fts
        := to_tsvector('simple',
                       lower(unaccent(coalesce(NEW.customer_name, '') || ' ' || coalesce(NEW.address, '') || ' ' ||
                                      coalesce(NEW.phone, ''))));
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

CREATE
    OR REPLACE TRIGGER TRG_CUSTOMERS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON CUSTOMERS
    FOR EACH ROW
EXECUTE FUNCTION UPDATE_CUSTOMERS_FTS();

-- Users
----
-- Thêm cột FTS nếu chưa có
ALTER TABLE PUBLIC.USERS
    ADD COLUMN IF NOT EXISTS FTS TSVECTOR;

-- Tạo chỉ mục FTS
CREATE INDEX IF NOT EXISTS USERS_FTS_IDX ON PUBLIC.USERS USING GIN (FTS);

-- Cập nhật dữ liệu ban đầu
UPDATE PUBLIC.USERS
SET FTS = TO_TSVECTOR(
        'simple',
        LOWER(
                UNACCENT(
                        COALESCE(FULLNAME, '') || ' ' || COALESCE(EMAIL, '') || ' ' || COALESCE(PHONE, '') || ' ' ||
                        COALESCE(USERNAME, '')
                )
        )
          );

-- Tạo lại hàm trigger
CREATE OR REPLACE FUNCTION UPDATE_USERS_FTS() RETURNS TRIGGER AS
$$
BEGIN
    NEW.fts := to_tsvector(
            'simple',
            lower(unaccent(
                    coalesce(NEW.fullname, '') || ' ' ||
                    coalesce(NEW.email, '') || ' ' ||
                    coalesce(NEW.phone, '') || ' ' ||
                    coalesce(NEW.username, '')
                  ))
               );
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

-- Tạo lại trigger
CREATE
    OR REPLACE TRIGGER TRG_USERS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON PUBLIC.USERS
    FOR EACH ROW
EXECUTE FUNCTION UPDATE_USERS_FTS();

-- ORDERS
--  FTS
-- Thêm cột FTS nếu chưa có
ALTER TABLE PUBLIC.ORDERS
    ADD COLUMN IF NOT EXISTS FTS TSVECTOR;

-- Tạo chỉ mục FTS
CREATE INDEX IF NOT EXISTS ORDERS_FTS_IDX ON PUBLIC.ORDERS USING GIN (FTS);

-- Cập nhật dữ liệu ban đầu
UPDATE PUBLIC.ORDERS
SET FTS = TO_TSVECTOR(
        'simple',
        LOWER(
                UNACCENT(
                        COALESCE(RECEIVER_NAME, '') || ' ' || COALESCE(RECEIVER_ADDRESS, '') || ' ' ||
                        COALESCE(RECEIVER_PHONE, '') || ' ' || COALESCE(NOTE, '')
                )
        )
          );

-- Tạo lại hàm trigger
CREATE OR REPLACE FUNCTION UPDATE_ORDERS_FTS() RETURNS TRIGGER AS
$$
BEGIN
    NEW.fts := to_tsvector(
            'simple',
            lower(unaccent(
                    coalesce(NEW.receiver_name, '') || ' ' ||
                    coalesce(NEW.receiver_address, '') || ' ' ||
                    coalesce(NEW.receiver_phone, '') || ' ' ||
                    coalesce(NEW.note, '')
                  ))
               );
    RETURN NEW;
END
$$ LANGUAGE PLPGSQL;

-- Tạo lại trigger
CREATE
    OR REPLACE TRIGGER TRG_ORDERS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON PUBLIC.ORDERS
    FOR EACH ROW
EXECUTE FUNCTION UPDATE_ORDERS_FTS();

CREATE
    OR REPLACE TRIGGER TRG_PRODUCTS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON PRODUCTS
    FOR EACH ROW
EXECUTE PROCEDURE PRODUCTS_FTS_TRIGGER();

CREATE
    OR REPLACE TRIGGER TRG_PRODUCT_VARIANTS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON PRODUCT_VARIANTS
    FOR EACH ROW
EXECUTE PROCEDURE PRODUCT_VARIANTS_FTS_TRIGGER();

CREATE
    OR REPLACE TRIGGER TRG_ORDERS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON ORDERS
    FOR EACH ROW
EXECUTE PROCEDURE UPDATE_ORDERS_FTS();

CREATE
    OR REPLACE TRIGGER TRG_USERS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON USERS
    FOR EACH ROW
EXECUTE PROCEDURE UPDATE_USERS_FTS();

CREATE
    OR REPLACE TRIGGER TRG_CUSTOMERS_FTS
    BEFORE INSERT
        OR
        UPDATE
    ON CUSTOMERS
    FOR EACH ROW
EXECUTE PROCEDURE UPDATE_CUSTOMERS_FTS();